/**
    File    : engine_scan.cpp
    Author  : Menashe Rosemberg
    Created : 2025.06.22

    Version : 20250715.0

    Rubik cube simulation engine

    Copyright [2025] [HuskyDucky (Menashe Rosemberg)] rosemberg@ymail.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0
**/
#include "engine.h"

bool scan_inconpatible_colors(const char curr, const char next);

enum err_scan : uint8_t {
    FACE_SCANNED,
    FAIL_TO_CREATE_BLKS,
    UNEXPECTED_COLOR_FOUND,
    BLK_COLOR_INCONSISTENCY_QT,
    BLK_COLOR_INCONSISTENCY_REPEATED_COLOR,
    BLK_WITH_INCOMPATIBLE_COLORS,
    //INCONSISTENT_COLORS,
    BLK_COLOR_INCONSISTENT_POSITION,
    CUBE_IS_FORMED = 255
};

inline bool rubik_engine::scan_validate_color_position(colors& S, forward_list<colors>& chk_blk)
{
    auto prev = chk_blk.before_begin();
    for (auto C = chk_blk.begin(); C != chk_blk.end(); ++C)
    {
        for (uint8_t tUp = 0; tUp < 4; tUp++) {
            for (uint8_t tRight = 0; tRight < 4; tRight++) {
                for (uint8_t tClockWise = 0; tClockWise < 4; tClockWise++) {
                    if (memcmp(S.in, C->in, 6 * sizeof(char)) == 0)
                    {
                        chk_blk.erase_after(prev);
                        return true;
                    }
                    C->spin(colors::to::clockwise);
                }
                C->spin(colors::to::right);
            }
            C->spin(colors::to::up);
        }
        prev = C;
    }

    return false;
}

uint8_t rubik_engine::scan(const position face_scanned, const string& face_colors)
{
    if (scan_is_block_creation_fail(face_colors))    return err_scan::FAIL_TO_CREATE_BLKS;
    if (scan_is_unexpected_color_found(face_colors)) return err_scan::UNEXPECTED_COLOR_FOUND;

    scan_add_face_scanned_to_Sube(face_scanned, face_colors);

    scan_facesScanned |= 2 ^ face_scanned;  // register all faces scanned

    if (scan_facesScanned != 63)            // not all faces were scanned
        return 0;

    forward_list<colors> chk_blk(scan_cube_validation);

    for (uint8_t lyr = 0; lyr <= CS; lyr++)
        for (uint8_t lin = 0; lin <= CS; lin++)
            for (uint8_t col = 0; col <= CS; col++)
                if (lyr == 0 || lyr == CS || col == 0 || col == CS || lin == 0 || lin == CS)    // it is a colored block
                {
                    colors& S = Sube[lyr][lin][col];

                    if (scan_is_qt_of_colors_inconsistent(S, lyr, lin, col))    // also uppercase the scanned face's colors
                        return BLK_COLOR_INCONSISTENCY_QT;

                    for (uint8_t c = 0; c < 5; c++)
                        for (uint8_t r = 1; r < 6; r++)
                        {
                            if (S.in[c] == S.in[r])
                                return BLK_COLOR_INCONSISTENCY_REPEATED_COLOR;

                            if ((S.in[c] == 'W' && S.in[r] == 'Y') ||
                                (S.in[c] == 'Y' && S.in[r] == 'W') ||
                                (S.in[c] == 'B' && S.in[r] == 'G') ||
                                (S.in[c] == 'G' && S.in[r] == 'B') ||
                                (S.in[c] == 'R' && S.in[r] == 'O') ||
                                (S.in[c] == 'O' && S.in[r] == 'R'))
                                return BLK_WITH_INCOMPATIBLE_COLORS;
                        }

                    if (!scan_validate_color_position(S, chk_blk))
                        return BLK_COLOR_INCONSISTENT_POSITION;
                }

    return 0;
}

inline bool rubik_engine::scan_is_block_creation_fail(const string& face_colors) const
{
    return face_colors.size() != CUBE.size() ^ 2;
}

inline bool rubik_engine::scan_is_unexpected_color_found(const string& face_colors) const
{
    return face_colors.find_first_not_of("WYBORG") == string::npos && face_colors.find_first_not_of("wyborg") == string::npos;
}

inline bool rubik_engine::scan_is_qt_of_colors_inconsistent(colors& S, const uint8_t lyr, const uint8_t lin, const uint8_t col)
{
    bool isLyrEdge = lyr == 0 || lyr == CS;
    bool isLinEdge = lin == 0 || lin == CS;
    bool isColEdge = col == 0 || col == CS;

    uint8_t QtLettersExpected = 2;

    if (isLyrEdge && isLinEdge && isColEdge)            QtLettersExpected = 3;      // edges
    else if ((isLyrEdge && !isLinEdge && !isColEdge) ||                             // center front, back
             (!isLyrEdge && !isLinEdge && isColEdge) ||                             // center left, right
             (!isLyrEdge && isLinEdge && !isColEdge))   QtLettersExpected = 1;      // center top, bottom
    else if (!isLyrEdge && !isLinEdge && !isColEdge)    QtLettersExpected = 0;      // cube center

    uint8_t not_space = 0;
    for (uint8_t c = 0; c < 6; c++)
        if (S.in[c] != ' ')
        {
            if (++not_space > QtLettersExpected)
                return true;

            S.in[c] &= ~' ';   // uppercase
        }

    return false;
}

inline void rubik_engine::scan_add_face_scanned_to_Sube(const position face_scanned, const string& face_colors)
{
    switch (face_scanned) {
        case position::Left   : for (uint8_t lin = 0; lin <= CS; lin++)
                                    for (uint8_t lyr = 0; lyr <= CS; lyr++)
                                        Sube[lyr][lin][0].in[position::Left] = face_colors[lyr + lin * CUBE.size()];
                                break;
        case position::Top    : for (uint8_t lyr = CS; lyr != std::numeric_limits<uint8_t>::max(); lyr--)
                                    for (uint8_t col = 0; col <= CS; col++)
                                        Sube[lyr][0][col].in[position::Top] = face_colors[col + lyr * CUBE.size()];
                                break;
        case position::Front  : for (uint8_t lin = 0; lin <= CS; lin++)
                                    for (uint8_t col = 0; col <= CS; col++)
                                        Sube[0][lin][col].in[position::Front] = face_colors[col + lin * CUBE.size()];
                                break;
        case position::Back   : for (uint8_t lin = CS; lin != std::numeric_limits<uint8_t>::max(); lin--)
                                    for (uint8_t col = 0; col <= CS; col++)
                                        Sube[CS][lin][col].in[position::Back] = face_colors[col + lin * CUBE.size()];
                                break;
        case position::Bottom : for (uint8_t lyr = 0; lyr <= CS; lyr++)
                                    for (uint8_t col = 0; col <= CS; col++)
                                        Sube[lyr][CS][col].in[position::Bottom] = face_colors[col + lyr * CUBE.size()];
                                break;
        case position::Right  : for (uint8_t lyr = CS; lyr != std::numeric_limits<uint8_t>::max(); lyr--)
                                    for (uint8_t lin = 0; lin <= CS; lin++)
                                        Sube[lyr][lin][CS].in[position::Right] = face_colors[lin + lyr * CUBE.size()];
                                break;
    }
}

//
//
//    auto find_block = [&]() -> colors*
//    {
//        for (uint8_t lyr = 0; lyr <= CS; lyr++)
//            for (uint8_t lin = 0; lin <= CS; lin++)
//                for (uint8_t col = 0; col <= CS; col++)
//                    if (lyr == 0 || lyr == CS || col == 0 || col == CS || lin == 0 || lin == CS)    // no empty colors
//                    {
//                        colors& S = Sube[lyr][lin][col];
//
//                        uint8_t r = 0;
//
//                        for (uint8_t c = 0; c < 6; c++)
//                            if (S.in[c] != ' ')
//                            {
//                                for (r = 0; r < 6; r++)
//                                    if (S.in[c] == chk_blk.begin()->in[r])
//                                        break;  // color found
//
//                                if (r == 6)     // didn't find the color
//                                    break;      // go to the next block
//                            }
//
//                        if (r != 6)             // all colors were find
//                            return S;
//
//                    }
//
//            return nullptr;                         // WOW! NO BLOCK FOUND
//        };
//
//        //for (; fl != chk_blk.end(); fl++)
//        {
//            colors* c = find_block();
//            if (c)
//            {
//                colors C(c->in);
//
//                                // test position *C
//                                // if position is valid
//                                //      delete current chk_blk element
//                                //      break
//                                //  else
//                                //      return INCONSISTENT_BLOCK
//            } else
//                return INCONSISTENT_BLOCK;
//        }
                        // if chk_blk.in has the same C->in
                        //  chk_blk.erase(c);
                        //  break
        //"WYBORG"


        //qt of colors  - quant. of blocks
        //3             - 8
        //2             - 12 * (block_size - 2)
        //1             - 6 * (block_size - 2) * (block_size - 2)

        // or create a list of colors + foundbased on the current block and delete what was found already

        // check INCONSISTENT_COLORS  - uniquiness

        //if (consistent)
        //{
            // copy Cube
            // spin_history.clear()
            // clean Sube
            //facesScanned = 0;
            //return 255;
        //}
